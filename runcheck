#!/usr/bin/env ruby

if ARGV.empty? then
  STDERR.puts "usage: runcheck <script> [args ...]"
  STDERR.puts
  STDERR.puts "script: absolute path or filename part"
  STDERR.puts "args:   key/value pairs (foo=bar baz=frob)"
  exit 1
end

# via https://github.com/akirahrkw/levenshtein-distance
# http://en.wikipedia.org/wiki/Levenshtein_distance
class String

  def ld(b)
    levenshtein_distance(b)
  end

  def levenshtein_distance(b)
    a = self
    a_len = a.length
    b_len = b.length
    d = Array.new(a_len + 1).map! {
      Array.new(b_len + 1).map!{
        0
      }
    }
    (a_len + 1).times { |i| d[i][0] = i }
    (b_len + 1).times { |i| d[0][i] = i }

    for i in 1..(a_len)
      for j in 1..(b_len)
        cost = (a[i - 1] == b[j - 1]) ? 0 : 1
        d[i][j] = [ d[i-1][j] + 1 , d[i][j-1] + 1 ,d[i-1][j-1] + cost].min
      end
    end
    d[-1][-1]
  end
end

ROOT = __dir__

script = ARGV.shift

# try to locate script
if not File.exists? script then
  s = File.expand_path(File.join(ROOT, script))
  if File.exists? s then
    script = s

  else
    # try searching
    files = Dir.glob(File.join(ROOT, "**/**")).reject{ |f|
      # select only actual script files to look at
      File.directory? f or
      f =~ /\.(json|test.*)|\/digest$/ or
      File.dirname(f) == ROOT or
      File.dirname(f) =~ /\/(test|lib)$/
    }
    script = files.find_all{ |f| f.include? script }.sort { |a,b|
      script.ld(File.basename(a)) <=> script.ld(File.basename(b))
    }.shift

    if script.nil? then
      STDERR.puts "couldn't find any scripts matching '#{script}'"
      exit 1
    end
  end

end

opts = ARGV.join(" ")
if opts == "--help" then
  cmd = [ File.join(ROOT, "./run"), script, opts ]
else
  cmd = [ File.join(ROOT, "./opts"), ARGV, "|", File.join(ROOT, "./run"), script ]
end

`which json_reformat`
cmd << "| json_reformat" if $? == 0

cmd = cmd.flatten.join(" ")
STDERR.puts cmd
exec(cmd)
